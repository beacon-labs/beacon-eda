
/*
 * BLPortBase
 * ------------------------------
 * A port of a design
 *
 * IMPORTANT NOTE: DO NOT EDIT THIS FILE, edit bl_port.h instead
 *
 */

#include "bl_port_base.h"


string BLPortBase::get_name()
{
    return this->name;
}

void BLPortBase::observe_name(shared_ptr<IBLObserver<string>> observer)
{
    name_observers.push_back( observer );
}

void BLPortBase::set_name(string value)
{
    this->name = value;
    for ( shared_ptr<IBLObserver<string>> observer : name_observers )
    {
        observer->update( value );
    }
}


string BLPortBase::get_direction()
{
    return this->direction;
}

void BLPortBase::observe_direction(shared_ptr<IBLObserver<string>> observer)
{
    direction_observers.push_back( observer );
}

void BLPortBase::set_direction(string value)
{
    this->direction = value;
    for ( shared_ptr<IBLObserver<string>> observer : direction_observers )
    {
        observer->update( value );
    }
}


int BLPortBase::get_from()
{
    return this->from;
}

void BLPortBase::observe_from(shared_ptr<IBLObserver<int>> observer)
{
    from_observers.push_back( observer );
}

void BLPortBase::set_from(int value)
{
    this->from = value;
    for ( shared_ptr<IBLObserver<int>> observer : from_observers )
    {
        observer->update( value );
    }
}


int BLPortBase::get_to()
{
    return this->to;
}

void BLPortBase::observe_to(shared_ptr<IBLObserver<int>> observer)
{
    to_observers.push_back( observer );
}

void BLPortBase::set_to(int value)
{
    this->to = value;
    for ( shared_ptr<IBLObserver<int>> observer : to_observers )
    {
        observer->update( value );
    }
}

