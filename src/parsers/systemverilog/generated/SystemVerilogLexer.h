
// Generated from SystemVerilogLexer.g4 by ANTLR 4.11.1

#pragma once


#include "antlr4-runtime.h"




class  SystemVerilogLexer : public antlr4::Lexer {
public:
  enum {
    ACCEPT_ON = 1, ALIAS = 2, ALWAYS = 3, ALWAYS_COMB = 4, ALWAYS_FF = 5, 
    ALWAYS_LATCH = 6, AM = 7, AMAM = 8, AMAMAM = 9, AMEQ = 10, AND = 11, 
    AP = 12, AS = 13, ASAS = 14, ASEQ = 15, ASGT = 16, ASSERT = 17, ASSIGN = 18, 
    ASSUME = 19, AT = 20, ATAT = 21, AUTOMATIC = 22, BEFORE = 23, BEGIN = 24, 
    BIND = 25, BINS = 26, BINSOF = 27, BIT = 28, BREAK = 29, BUF = 30, BUFIFONE = 31, 
    BUFIFZERO = 32, BYTE = 33, CA = 34, CAEQ = 35, CASE = 36, CASEX = 37, 
    CASEZ = 38, CATI = 39, CELL = 40, CHANDLE = 41, CHECKER = 42, CL = 43, 
    CLASS = 44, CLCL = 45, CLEQ = 46, CLOCKING = 47, CLSL = 48, CMOS = 49, 
    CO = 50, CONFIG = 51, CONST = 52, CONSTRAINT = 53, CONTEXT = 54, CONTINUE = 55, 
    COVER = 56, COVERGROUP = 57, COVERPOINT = 58, CROSS = 59, DEASSIGN = 60, 
    DEFAULT = 61, DEFPARAM = 62, DESIGN = 63, DISABLE = 64, DIST = 65, DL = 66, 
    DLERROR = 67, DLFATAL = 68, DLFULLSKEW = 69, DLHOLD = 70, DLINFO = 71, 
    DLNOCHANGE = 72, DLPERIOD = 73, DLRECOVERY = 74, DLRECREM = 75, DLREMOVAL = 76, 
    DLROOT = 77, DLSETUP = 78, DLSETUPHOLD = 79, DLSKEW = 80, DLTIMESKEW = 81, 
    DLUNIT = 82, DLWARNING = 83, DLWIDTH = 84, DO = 85, DQ = 86, DQDPIDQ = 87, 
    DQDPIMICDQ = 88, DT = 89, DTAS = 90, EDGE = 91, ELSE = 92, EM = 93, 
    EMEQ = 94, EMEQEQ = 95, EMEQQM = 96, END = 97, ENDCASE = 98, ENDCHECKER = 99, 
    ENDCLASS = 100, ENDCLOCKING = 101, ENDCONFIG = 102, ENDFUNCTION = 103, 
    ENDGENERATE = 104, ENDGROUP = 105, ENDINTERFACE = 106, ENDMODULE = 107, 
    ENDPACKAGE = 108, ENDPRIMITIVE = 109, ENDPROGRAM = 110, ENDPROPERTY = 111, 
    ENDSEQUENCE = 112, ENDSPECIFY = 113, ENDTABLE = 114, ENDTASK = 115, 
    ENUM = 116, EQ = 117, EQEQ = 118, EQEQEQ = 119, EQEQQM = 120, EQGT = 121, 
    EVENT = 122, EVENTUALLY = 123, EXPECT = 124, EXPORT = 125, EXTENDS = 126, 
    EXTERN = 127, FINAL = 128, FIRST_MATCH = 129, FOR = 130, FORCE = 131, 
    FOREACH = 132, FOREVER = 133, FORK = 134, FORKJOIN = 135, FUNCTION = 136, 
    GA = 137, GENERATE = 138, GENVAR = 139, GLOBAL = 140, GT = 141, GTEQ = 142, 
    GTGT = 143, GTGTEQ = 144, GTGTGT = 145, GTGTGTEQ = 146, HA = 147, HAEQHA = 148, 
    HAHA = 149, HAMIHA = 150, HIGHZONE = 151, HIGHZZERO = 152, IF = 153, 
    IFF = 154, IFNONE = 155, IGNORE_BINS = 156, ILLEGAL_BINS = 157, IMPLEMENTS = 158, 
    IMPLIES = 159, IMPORT = 160, INCLUDE = 161, INITIAL = 162, INOUT = 163, 
    INPUT = 164, INSIDE = 165, INSTANCE = 166, INT = 167, INTEGER = 168, 
    INTERCONNECT = 169, INTERFACE = 170, INTERSECT = 171, JOIN = 172, JOIN_ANY = 173, 
    JOIN_NONE = 174, LARGE = 175, LB = 176, LC = 177, LET = 178, LIBLIST = 179, 
    LIBRARY = 180, LOCAL = 181, LOCALPARAM = 182, LOGIC = 183, LONGINT = 184, 
    LP = 185, LT = 186, LTEQ = 187, LTLT = 188, LTLTEQ = 189, LTLTLT = 190, 
    LTLTLTEQ = 191, LTMIGT = 192, MACROMODULE = 193, MATCHES = 194, MEDIUM = 195, 
    MI = 196, MICL = 197, MIEQ = 198, MIGT = 199, MIGTGT = 200, MIINCDIR = 201, 
    MIMI = 202, MO = 203, MODPORT = 204, MODULE = 205, MOEQ = 206, NAND = 207, 
    NEGEDGE = 208, NETTYPE = 209, NEW = 210, NEXTTIME = 211, NMOS = 212, 
    NOR = 213, NOSHOWCANCELLED = 214, NOT = 215, NOTIFONE = 216, NOTIFZERO = 217, 
    NULL = 218, ONESTEP = 219, OPTION = 220, OR = 221, OUTPUT = 222, PACKAGE = 223, 
    PACKED = 224, PARAMETER = 225, PATHPULSEDL = 226, PL = 227, PLCL = 228, 
    PLEQ = 229, PLPL = 230, PMOS = 231, POSEDGE = 232, PRIMITIVE = 233, 
    PRIORITY = 234, PROGRAM = 235, PROPERTY = 236, PROTECTED = 237, PULLDOWN = 238, 
    PULLONE = 239, PULLUP = 240, PULLZERO = 241, PULSESTYLE_ONDETECT = 242, 
    PULSESTYLE_ONEVENT = 243, PURE = 244, QM = 245, RAND = 246, RANDC = 247, 
    RANDCASE = 248, RANDOMIZE = 249, RANDSEQUENCE = 250, RB = 251, RC = 252, 
    RCMOS = 253, REAL = 254, REALTIME = 255, REF = 256, REG = 257, REJECT_ON = 258, 
    RELEASE = 259, REPEAT = 260, RESTRICT = 261, RETURN = 262, RNMOS = 263, 
    RP = 264, RPMOS = 265, RTRAN = 266, RTRANIFONE = 267, RTRANIFZERO = 268, 
    S_ALWAYS = 269, S_EVENTUALLY = 270, S_NEXTTIME = 271, S_UNTIL = 272, 
    S_UNTIL_WITH = 273, SAMPLE = 274, SC = 275, SCALARED = 276, SEQUENCE = 277, 
    SHORTINT = 278, SHORTREAL = 279, SHOWCANCELLED = 280, SIGNED = 281, 
    SL = 282, SLEQ = 283, SMALL = 284, SOFT = 285, SOLVE = 286, SPECIFY = 287, 
    SPECPARAM = 288, STATIC = 289, STD = 290, STRING = 291, STRONG = 292, 
    STRONGONE = 293, STRONGZERO = 294, STRUCT = 295, SUPER = 296, SUPPLYONE = 297, 
    SUPPLYZERO = 298, SYNC_ACCEPT_ON = 299, SYNC_REJECT_ON = 300, TABLE = 301, 
    TAGGED = 302, TASK = 303, THIS = 304, THROUGHOUT = 305, TI = 306, TIAM = 307, 
    TICA = 308, TIME = 309, TIMEPRECISION = 310, TIMEUNIT = 311, TIVL = 312, 
    TRAN = 313, TRANIFONE = 314, TRANIFZERO = 315, TRI = 316, TRIAND = 317, 
    TRIONE = 318, TRIOR = 319, TRIREG = 320, TRIZERO = 321, TYPE = 322, 
    TYPE_OPTION = 323, TYPEDEF = 324, UNION = 325, UNIQUE = 326, UNIQUEZERO = 327, 
    UNSIGNED = 328, UNTIL = 329, UNTIL_WITH = 330, UNTYPED = 331, USE = 332, 
    UWIRE = 333, VAR = 334, VECTORED = 335, VIRTUAL = 336, VL = 337, VLEQ = 338, 
    VLEQGT = 339, VLMIGT = 340, VLVL = 341, VOID = 342, WAIT = 343, WAIT_ORDER = 344, 
    WAND = 345, WEAK = 346, WEAKONE = 347, WEAKZERO = 348, WHILE = 349, 
    WILDCARD = 350, WIRE = 351, WITH = 352, WITHIN = 353, WOR = 354, XNOR = 355, 
    XOR = 356, BINARY_BASE = 357, COMMENT = 358, DECIMAL_BASE = 359, ESCAPED_IDENTIFIER = 360, 
    EXPONENTIAL_NUMBER = 361, FIXED_POINT_NUMBER = 362, HEX_BASE = 363, 
    OCTAL_BASE = 364, SIMPLE_IDENTIFIER = 365, STRING_LITERAL = 366, SYSTEM_TF_IDENTIFIER = 367, 
    TIME_LITERAL = 368, UNBASED_UNSIZED_LITERAL = 369, UNSIGNED_NUMBER = 370, 
    WHITE_SPACE = 371, ZERO_OR_ONE_X_OR_Z = 372, BINARY_VALUE = 373, X_OR_Z_UNDERSCORE = 374, 
    HEX_VALUE = 375, FILE_PATH_SPEC = 376, OCTAL_VALUE = 377, EDGE_SYMBOL = 378, 
    LEVEL_ONLY_SYMBOL = 379, OUTPUT_OR_LEVEL_SYMBOL = 380, BEGIN_KEYWORDS_DIRECTIVE = 381, 
    CELLDEFINE_DIRECTIVE = 382, DEFAULT_NETTYPE_DIRECTIVE = 383, DEFINE_DIRECTIVE = 384, 
    ELSE_DIRECTIVE = 385, ELSIF_DIRECTIVE = 386, END_KEYWORDS_DIRECTIVE = 387, 
    ENDCELLDEFINE_DIRECTIVE = 388, ENDIF_DIRECTIVE = 389, FILE_DIRECTIVE = 390, 
    IFDEF_DIRECTIVE = 391, IFNDEF_DIRECTIVE = 392, INCLUDE_DIRECTIVE = 393, 
    LINE_DIRECTIVE = 394, LINE_DIRECTIVE_ = 395, NOUNCONNECTED_DRIVE_DIRECTIVE = 396, 
    PRAGMA_DIRECTIVE = 397, RESETALL_DIRECTIVE = 398, TIMESCALE_DIRECTIVE = 399, 
    UNCONNECTED_DRIVE_DIRECTIVE = 400, UNDEF_DIRECTIVE = 401, UNDEFINEALL_DIRECTIVE = 402, 
    MACRO_USAGE = 403, VERSION_SPECIFIER = 404, DEFAULT_NETTYPE_VALUE = 405, 
    COMMENT_4 = 406, MACRO_NAME = 407, WHITE_SPACE_6 = 408, FILENAME = 409, 
    MACRO_DELIMITER = 410, MACRO_ESC_NEWLINE = 411, MACRO_ESC_QUOTE = 412, 
    MACRO_QUOTE = 413, MACRO_TEXT = 414, SOURCE_TEXT = 415, TIME_UNIT = 416, 
    TIME_VALUE = 417, UNCONNECTED_DRIVE_VALUE = 418, MACRO_IDENTIFIER = 419
  };

  enum {
    COMMENTS = 2, DIRECTIVES = 3
  };

  enum {
    BINARY_NUMBER_MODE = 1, DECIMAL_NUMBER_MODE = 2, HEX_NUMBER_MODE = 3, 
    LIBRARY_MODE = 4, OCTAL_NUMBER_MODE = 5, TABLE_MODE = 6, DIRECTIVE_MODE = 7, 
    BEGIN_KEYWORDS_DIRECTIVE_MODE = 8, DEFAULT_NETTYPE_DIRECTIVE_MODE = 9, 
    DEFINE_DIRECTIVE_MODE = 10, ELSIF_DIRECTIVE_MODE = 11, FILENAME_MODE = 12, 
    IFDEF_DIRECTIVE_MODE = 13, INCLUDE_DIRECTIVE_MODE = 14, LINE_DIRECTIVE_MODE = 15, 
    MACRO_TEXT_MODE = 16, PRAGMA_DIRECTIVE_MODE = 17, SOURCE_TEXT_MODE = 18, 
    TIMESCALE_DIRECTIVE_MODE = 19, UNCONNECTED_DRIVE_DIRECTIVE_MODE = 20, 
    UNDEF_DIRECTIVE_MODE = 21
  };

  explicit SystemVerilogLexer(antlr4::CharStream *input);

  ~SystemVerilogLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

