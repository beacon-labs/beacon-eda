
// Generated from VerilogLexer.g4 by ANTLR 4.11.1

#pragma once


#include "antlr4-runtime.h"




class  VerilogLexer : public antlr4::Lexer {
public:
  enum {
    ALWAYS = 1, AM = 2, AMAM = 3, AMAMAM = 4, AND = 5, AS = 6, ASAS = 7, 
    ASGT = 8, ASSIGN = 9, AT = 10, AUTOMATIC = 11, BEGIN = 12, BUF = 13, 
    BUFIFONE = 14, BUFIFZERO = 15, CA = 16, CASE = 17, CASEX = 18, CASEZ = 19, 
    CATI = 20, CELL = 21, CL = 22, CMOS = 23, CO = 24, CONFIG = 25, DEASSIGN = 26, 
    DEFAULT = 27, DEFPARAM = 28, DESIGN = 29, DISABLE = 30, DL = 31, DLFULLSKEW = 32, 
    DLHOLD = 33, DLNOCHANGE = 34, DLPERIOD = 35, DLRECOVERY = 36, DLRECREM = 37, 
    DLREMOVAL = 38, DLSETUP = 39, DLSETUPHOLD = 40, DLSKEW = 41, DLTIMESKEW = 42, 
    DLWIDTH = 43, DQ = 44, DT = 45, EDGE = 46, ELSE = 47, EM = 48, EMEQ = 49, 
    EMEQEQ = 50, END = 51, ENDCASE = 52, ENDCONFIG = 53, ENDFUNCTION = 54, 
    ENDGENERATE = 55, ENDMODULE = 56, ENDPRIMITIVE = 57, ENDSPECIFY = 58, 
    ENDTABLE = 59, ENDTASK = 60, EQ = 61, EQEQ = 62, EQEQEQ = 63, EQGT = 64, 
    EVENT = 65, FOR = 66, FORCE = 67, FOREVER = 68, FORK = 69, FUNCTION = 70, 
    GA = 71, GENERATE = 72, GENVAR = 73, GT = 74, GTEQ = 75, GTGT = 76, 
    GTGTGT = 77, HA = 78, HIGHZONE = 79, HIGHZZERO = 80, IF = 81, IFNONE = 82, 
    INCLUDE = 83, INITIAL = 84, INOUT = 85, INPUT = 86, INSTANCE = 87, INTEGER = 88, 
    JOIN = 89, LARGE = 90, LB = 91, LC = 92, LIBLIST = 93, LIBRARY = 94, 
    LOCALPARAM = 95, LP = 96, LT = 97, LTEQ = 98, LTLT = 99, LTLTLT = 100, 
    MACROMODULE = 101, MEDIUM = 102, MI = 103, MICL = 104, MIGT = 105, MIINCDIR = 106, 
    MO = 107, MODULE = 108, NAND = 109, NEGEDGE = 110, NMOS = 111, NOR = 112, 
    NOSHOWCANCELLED = 113, NOT = 114, NOTIFONE = 115, NOTIFZERO = 116, OR = 117, 
    OUTPUT = 118, PARAMETER = 119, PATHPULSEDL = 120, PL = 121, PLCL = 122, 
    PMOS = 123, POSEDGE = 124, PRIMITIVE = 125, PULLDOWN = 126, PULLONE = 127, 
    PULLUP = 128, PULLZERO = 129, PULSESTYLE_ONDETECT = 130, PULSESTYLE_ONEVENT = 131, 
    QM = 132, RB = 133, RC = 134, RCMOS = 135, REAL = 136, REALTIME = 137, 
    REG = 138, RELEASE = 139, REPEAT = 140, RNMOS = 141, RP = 142, RPMOS = 143, 
    RTRAN = 144, RTRANIFONE = 145, RTRANIFZERO = 146, SC = 147, SCALARED = 148, 
    SHOWCANCELLED = 149, SIGNED = 150, SL = 151, SMALL = 152, SPECIFY = 153, 
    SPECPARAM = 154, STRONGONE = 155, STRONGZERO = 156, SUPPLYONE = 157, 
    SUPPLYZERO = 158, TABLE = 159, TASK = 160, TI = 161, TIAM = 162, TICA = 163, 
    TIME = 164, TIVL = 165, TRAN = 166, TRANIFONE = 167, TRANIFZERO = 168, 
    TRI = 169, TRIAND = 170, TRIONE = 171, TRIOR = 172, TRIREG = 173, TRIZERO = 174, 
    USE = 175, UWIRE = 176, VECTORED = 177, VL = 178, VLVL = 179, WAIT = 180, 
    WAND = 181, WEAKONE = 182, WEAKZERO = 183, WHILE = 184, WIRE = 185, 
    WOR = 186, XNOR = 187, XOR = 188, BINARY_BASE = 189, COMMENT = 190, 
    DECIMAL_BASE = 191, ESCAPED_IDENTIFIER = 192, EXPONENTIAL_NUMBER = 193, 
    FIXED_POINT_NUMBER = 194, HEX_BASE = 195, OCTAL_BASE = 196, SIMPLE_IDENTIFIER = 197, 
    STRING = 198, SYSTEM_TF_IDENTIFIER = 199, UNSIGNED_NUMBER = 200, WHITE_SPACE = 201, 
    BINARY_VALUE = 202, X_OR_Z_UNDERSCORE = 203, EDGE_DESCRIPTOR = 204, 
    HEX_VALUE = 205, FILE_PATH_SPEC = 206, OCTAL_VALUE = 207, EDGE_SYMBOL = 208, 
    LEVEL_ONLY_SYMBOL = 209, OUTPUT_OR_LEVEL_SYMBOL = 210, BEGIN_KEYWORDS_DIRECTIVE = 211, 
    CELLDEFINE_DIRECTIVE = 212, DEFAULT_NETTYPE_DIRECTIVE = 213, DEFINE_DIRECTIVE = 214, 
    ELSE_DIRECTIVE = 215, ELSIF_DIRECTIVE = 216, END_KEYWORDS_DIRECTIVE = 217, 
    ENDCELLDEFINE_DIRECTIVE = 218, ENDIF_DIRECTIVE = 219, IFDEF_DIRECTIVE = 220, 
    IFNDEF_DIRECTIVE = 221, INCLUDE_DIRECTIVE = 222, LINE_DIRECTIVE = 223, 
    NOUNCONNECTED_DRIVE_DIRECTIVE = 224, PRAGMA_DIRECTIVE = 225, RESETALL_DIRECTIVE = 226, 
    TIMESCALE_DIRECTIVE = 227, UNCONNECTED_DRIVE_DIRECTIVE = 228, UNDEF_DIRECTIVE = 229, 
    MACRO_USAGE = 230, VERSION_SPECIFIER = 231, DEFAULT_NETTYPE_VALUE = 232, 
    COMMENT_5 = 233, MACRO_NAME = 234, WHITE_SPACE_7 = 235, FILENAME = 236, 
    MACRO_DELIMITER = 237, MACRO_ESC_NEWLINE = 238, MACRO_ESC_QUOTE = 239, 
    MACRO_QUOTE = 240, MACRO_TEXT = 241, SOURCE_TEXT = 242, TIME_UNIT = 243, 
    TIME_VALUE = 244, UNCONNECTED_DRIVE_VALUE = 245, MACRO_IDENTIFIER = 246
  };

  enum {
    COMMENTS = 2, DIRECTIVES = 3
  };

  enum {
    BINARY_NUMBER_MODE = 1, DECIMAL_NUMBER_MODE = 2, EDGE_MODE = 3, HEX_NUMBER_MODE = 4, 
    LIBRARY_MODE = 5, OCTAL_NUMBER_MODE = 6, TABLE_MODE = 7, DIRECTIVE_MODE = 8, 
    BEGIN_KEYWORDS_DIRECTIVE_MODE = 9, DEFAULT_NETTYPE_DIRECTIVE_MODE = 10, 
    DEFINE_DIRECTIVE_MODE = 11, ELSIF_DIRECTIVE_MODE = 12, FILENAME_MODE = 13, 
    IFDEF_DIRECTIVE_MODE = 14, INCLUDE_DIRECTIVE_MODE = 15, LINE_DIRECTIVE_MODE = 16, 
    MACRO_TEXT_MODE = 17, PRAGMA_DIRECTIVE_MODE = 18, SOURCE_TEXT_MODE = 19, 
    TIMESCALE_DIRECTIVE_MODE = 20, UNCONNECTED_DRIVE_DIRECTIVE_MODE = 21, 
    UNDEF_DIRECTIVE_MODE = 22
  };

  explicit VerilogLexer(antlr4::CharStream *input);

  ~VerilogLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

